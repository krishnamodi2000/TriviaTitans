AWSTemplateFormatVersion: '2010-09-09'

Resources:

# DynamoDB Table
  TriviaUserLoginInformationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'userId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'userId'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST
      TableName: TriviaUserLoginInformation

# API Gateway Resources and Methods
# Creates an API Gateway Rest API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TriviaGameApi
  
  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'user'

  LambdaAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.token
      Name: LambdaAuthorizer
      AuthorizerUri: !Sub
        - arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
        - lambdaArn: !GetAtt [ LambdaAuthorizerFunction, Arn ]
      RestApiId: !Ref ApiGatewayRestApi
      Type: TOKEN
      AuthorizerResultTtlInSeconds: 0

  LambdaAllowAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [ LambdaAuthorizerFunction, Arn ]
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com

  AuthorizerApiGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi

  # Creates a resource in the API Gateway Rest API
  RegisterUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref UserResource
      PathPart: registerUser

  OptionsMethodForRegisterUserResource:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref RegisterUserResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
              application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'content-type,token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Creates a method in the API Gateway Rest API
  RegisterUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref RegisterUserResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt RegisterNewUserFunction.Arn

  # Creates a resource in the API Gateway Rest API
  AuthenticateLoginUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref UserResource
      PathPart: authenticateUser

  OptionsMethodForAuthenticateLoginUserResource:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AuthenticateLoginUserResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
              application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'content-type,token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false


  # Creates a method in the API Gateway Rest API
  AuthenticateLoginUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref LambdaAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AuthenticateLoginUserResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt AuthenticateLoginUserFunction.Arn

  # API Gateway Deployment
  # Deploys the API Gateway Rest API
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RegisterUserMethod
      - AuthenticateLoginUserMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'dev'

# Lambda Functions 
  RegisterNewUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'RegisterNewUser'
      Runtime: 'python3.9'
      Timeout: 60
      Handler: 'register_new_user.lambda_handler'
      Layers:
        - !Ref FirebaseAdminLayer
      Code:
        S3Bucket: csci5410-trivia-game-project
        S3Key: auth_module/register_new_user.zip
      Role: arn:aws:iam::699271866560:role/LabRole
      Environment:
        Variables:
          topic_arn: !Ref TriviaGameUpdatesTopic
          dynamo_table_name: !Ref TriviaUserLoginInformationTable

  RegisterNewUserlambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RegisterNewUserFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:us-east-1:699271866560:${ApiGatewayRestApi}/*/POST/user/registerUser"

  AuthenticateLoginUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'AuthenticateLoginUser'
      Runtime: 'python3.9'
      Timeout: 60
      Handler: 'authenticate_login_user.lambda_handler'
      Code:
        S3Bucket: csci5410-trivia-game-project
        S3Key: auth_module/authenticate_login_user.zip
      Role: arn:aws:iam::699271866560:role/LabRole
      Environment:
        Variables:
          dynamo_table_name: !Ref TriviaUserLoginInformationTable

  AuthenticateLoginUserlambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthenticateLoginUserFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:us-east-1:699271866560:${ApiGatewayRestApi}/*/POST/user/authenticateUser"

  FirebaseAdminLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: FirebaseAdminLayer
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: csci5410-trivia-game-project
        S3Key: layer/firebaseAdmin.zip
      Description: Firebase Admin dependency

  LambdaAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaAuthorizerFunction
      Handler: lambda_authorizer.lambda_handler
      Role: arn:aws:iam::699271866560:role/LabRole
      Runtime: python3.9
      Timeout: 60
      Layers:
        - !Ref FirebaseAdminLayer
      Code:
        S3Bucket: csci5410-trivia-game-project
        S3Key: authorizer/lambda_authorizer.zip

  # SNS Topics
  # Creates an SNS Topic for trivia game updates
  TriviaGameUpdatesTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TriviaGameUpdatesTopic